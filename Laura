impl App {
    fn new() -> Self {
        Self { blocks: vec![] }
    }

    fn genesis(&mut self) {
        let genesis_block = Block {
            id: 0,
            timestamp: Utc::now().timestamp(),
            previous_hash: String::from("genesis"),
            data: String::from("genesis!"),
            nonce: 2836,
            hash: "0000f816a87f806bb0073dcf026a64fb40c946b5abee2573702828694d5b4c43".to_string(),
        };
        self.blocks.push(genesis_block);
    }

    fn add_block(&mut self, data: String) {
        let previous_block = self.blocks.last().expect("there is at least one block");
        let new_block = Block::new(previous_block.id + 1, previous_block.hash.clone(), data);
        self.blocks.push(new_block);
    }

    fn is_block_valid(&self, block: &Block, previous_block: &Block) -> bool {
        if block.previous_hash != previous_block.hash {
            return false;
        }
        if !block.is_hash_valid() {
            return false;
        }
        true
    }

    fn is_chain_valid(&self, chain: &[Block]) -> bool {
        for i in 0..chain.len() {
            if i == 0 {
                continue;
            }
            let first = chain.get(i - 1).expect("has to exist");
            let second = chain.get(i).expect("has to exist");
            if !self.is_block_valid(second, first) {
                return false;
            }
        }
        true
    }

    fn choose_chain(&mut self, local: Vec<Block>, remote: Vec<Block>) -> Vec<Block> {
        let is_local_valid = self.is_chain_valid(&local);
        let is_remote_valid = self.is_chain_valid(&remote);

        if is_local_valid && is_remote_valid {
            if local.len() >= remote.len() {
                local
            } else {
                remote
            }
        } else if is_local_valid {
            local
        } else {
            remote
        }
    }
}

impl Block {
    pub fn new(id: u64, previous_hash: String, data: String) -> Self {
        let mut nonce = 0;
        let mut hasher = Sha256::new();
        let mut data_to_hash = format!("{}{}{}{}", id, previous_hash, data, nonce);

        loop {
            hasher.update(&data_to_hash);
            let result = hasher.finalize();
            let hash_string = hex::encode(result);

            if hash_string.starts_with("0000") {
                break;
            }
            nonce += 1;
            data_to_hash = format!("{}{}{}{}", id, previous_hash, data, nonce);
        }

        Self {
            id,
            timestamp: Utc::now().timestamp(),
            previous_
